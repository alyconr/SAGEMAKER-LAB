# -*- coding: utf-8 -*-
"""Laboratorio_[Regresión_Lineal].ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uqdfcsBSuDMtEA4xOkr4GNX6CiQKMZ_4

# 1. Entorno
"""

#Creamos un Notebook en Python sobre JupyterLab

"""# 2. Librerías"""

#Utilitario para construir modelos de Machine Learning y Deep Learning
import sagemaker

"""# 3. Inicio de Sesión sobre SageMaker"""

#Iniciamos sesión en el servicio de SageMaker
sesion = sagemaker.Session()

#Obtenemos la ejecución en donde estamos trabajando
region = sesion.boto_region_name

#Verificamos
print(region)

#Obtenemos el rol de ejecución de SageMaker
#El rol de ejecución permite a SageMaker usar otros servicios de AWS
rol = sagemaker.get_execution_role()

"""# 4. Lectura de archivos"""

#Utilitario para leer archivos de datos
from sagemaker.inputs import TrainingInput

#Bucket en donde se encuentran los archivos
#IMPORTANTE: REEMPLAZAR "XXX" POR TUS INICIALES
bucket = "datasetsbdatestXXX"

#Lectura de datos de entrenamiento
dataTrain = TrainingInput(
    f"s3://{bucket}/data/insurance_train/", #Ruta del archivo
    content_type = "text/csv", #Formato del archivo
    distribution = "FullyReplicated", #El archivo será copiado en todos los servidores
    s3_data_type = "S3Prefix", #Desde donde se lee el archivo (S3)
    input_mode = "File", #Los registros se encuentran dentro de archivos
    record_wrapping = "None" #Envoltorio de optimización
)

#Lectura de datos de validación
dataTest = TrainingInput(
    f"s3://{bucket}/data/insurance_train/", #Ruta del archivo
    content_type = "text/csv", #Formato del archivo
    distribution = "FullyReplicated", #El archivo será copiado en todos los servidores
    s3_data_type = "S3Prefix", #Desde donde se lee el archivo (S3)
    input_mode = "File", #Los registros se encuentran dentro de archivos
    record_wrapping = "None" #Envoltorio de optimización
)

"""# 5. Configuración del Algoritmo"""

#Definimos el nombre para nuestro job de entrenamiento
nombreDeJobDeEntrenamiento = "entrenamiento-prediccion-numerica"

#Definimos el algoritmo que queremos usar
algoritmo = "linear-learner"

#Definimos el tipo de predicción que hará el algoritmo
#Para una predicción numérica debemos definir "regressor"
tipoDePrediccion = "regressor"

#Definimos la cantidad de servidores
#Con 1, nuestro algoritmo se ejecutará en 1 servidor
#Con más de 1, nuestro algoritmo se ejecutará en un clúster de varios servidores
numeroDeServidores = 1

#Definimos el tipo de servidor
tipoDeServidor = "ml.m5.large"

#Cantidad de features
cantidadDeFeatures = 11

#Importamos el utilitario para definir el entrenador del algoritmo
from sagemaker.estimator import Estimator

#Definimos el entrenador del algoritmo
entrenador = Estimator(
    image_uri = sagemaker.image_uris.retrieve(algoritmo, region), #Descargamos la implementación del algoritmo desde la región donde trabajamos
    role = rol, #Rol que ejecuta servicios sobre AWS
    instance_count = numeroDeServidores, #Cantidad de servidores de entrenamiento
    instance_type = tipoDeServidor, #Tipo de servidor de entrenamiento
    predictor_type = tipoDePrediccion, #Tipo de predicción del algoritmo
    sagemaker_session = sesion, #Sesión de SageMaker
    base_job_name = nombreDeJobDeEntrenamiento #Nombre del job de entrenamiento
)

#Configuramos los parametros del algoritmo
entrenador.set_hyperparameters(
    feature_dim = cantidadDeFeatures, #Cantidad de features
    predictor_type = tipoDePrediccion, #Indicamos que tipo de predicción es
    normalize_data = "true", #Normalizamos los features
    normalize_label = "true" #Normalizamos el label
)

"""# 6. Entrenamiento del Modelo"""

#Entrenamos y validamos el modelo
#MIENTRAS SE ENTRENA EL MODELO: En SageMaker, en la sección "Jobs", en la opción "Training" podemos ver cómo el modelo se entrena
#TIEMPO DE ENTRENAMIENTO: 5 MINUTOS
entrenador.fit({"train": dataTrain, "validation": dataTest})

"""# 7. Estadísticas del Modelo"""

#Librería para manipular los servicios de AWS
import boto3

#Nos conectamos al servicio de SageMaker
sagemakerCliente = boto3.client("sagemaker")

#Obtenemos el nombre del último entrenamiento realizado
nombreDeEntrenamiento = entrenador.latest_training_job.name

#Verificamos
print(nombreDeEntrenamiento)

#Obtenemos la descripción del entrenamiento
descripcionDeEntrenamiento = sagemakerCliente.describe_training_job(TrainingJobName = nombreDeEntrenamiento)

#Vemos toda la descripción de entrenamiento
descripcionDeEntrenamiento

#Dentro de la sub-variable "FinalMetricDataList" tenemos las métricas del modelo
#El error cuadrático medio se encuentra en "validation:mse"
#El r2 (error "porcentual") se encuentra en "validation:r2"
#IMPORTANTE: En SageMaker, en la sección "Jobs", en la opción "Training" podemos ver las estadísticas del modelo
descripcionDeEntrenamiento["FinalMetricDataList"]